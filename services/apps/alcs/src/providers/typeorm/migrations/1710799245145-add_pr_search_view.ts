import { MigrationInterface, QueryRunner } from 'typeorm';

export class AddPrSearchView1710799245145 implements MigrationInterface {
  name = 'AddPrSearchView1710799245145';

  public async up(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(
      `CREATE VIEW "alcs"."planning_review_search_view" AS SELECT "planning_review"."uuid" AS "uuid", "planning_review"."open" AS "open", "planningReviewType"."audit_deleted_date_at" AS "planningReviewType_audit_deleted_date_at", "planningReviewType"."audit_created_at" AS "planningReviewType_audit_created_at", "planningReviewType"."audit_updated_at" AS "planningReviewType_audit_updated_at", "planningReviewType"."audit_created_by" AS "planningReviewType_audit_created_by", "planningReviewType"."audit_updated_by" AS "planningReviewType_audit_updated_by", "planningReviewType"."label" AS "planningReviewType_label", "planningReviewType"."code" AS "planningReviewType_code", "planningReviewType"."description" AS "planningReviewType_description", "planningReviewType"."short_label" AS "planningReviewType_short_label", "planningReviewType"."background_color" AS "planningReviewType_background_color", "planningReviewType"."text_color" AS "planningReviewType_text_color", "planningReviewType"."html_description" AS "planningReviewType_html_description", "localGovernment"."name" AS "local_government_name", "planning_referral".*, "planning_review"."file_number" AS "file_number", "planning_review"."document_name" AS "document_name", planning_referral.submission_date AS "date_submitted_to_alc", "planning_review"."local_government_uuid" AS "local_government_uuid", "planning_review"."type_code" AS "planning_review_type_code", "planning_review"."region_code" AS "region_code" FROM "alcs"."planning_review" "planning_review" INNER JOIN "alcs"."planning_review_type" "planningReviewType" ON  "planning_review"."type_code" = "planningReviewType"."code" AND "planningReviewType"."audit_deleted_date_at" IS NULL  LEFT JOIN "alcs"."local_government" "localGovernment" ON  "planning_review"."local_government_uuid" = "localGovernment"."uuid" AND "localGovernment"."audit_deleted_date_at" IS NULL  LEFT JOIN (SELECT "planning_referral"."uuid" AS "planning_referral_uuid", "planning_referral"."submission_date" AS "submission_date", "planning_referral"."planning_review_uuid" AS "planning_review_uuid" FROM "alcs"."planning_referral" "planning_referral" INNER JOIN (SELECT "child"."planning_review_uuid" AS "planning_review_uuid", MIN("child"."audit_created_at") AS "audit_created_at" FROM "alcs"."planning_referral" "child" WHERE "child"."audit_deleted_date_at" IS NULL GROUP BY "child"."planning_review_uuid") "child" ON "planning_referral"."audit_created_at" = child.audit_created_at AND "planning_referral"."planning_review_uuid" = child.planning_review_uuid WHERE "planning_referral"."audit_deleted_date_at" IS NULL) "planning_referral" ON "planning_review"."uuid" = planning_referral.planning_review_uuid WHERE "planning_review"."audit_deleted_date_at" IS NULL`,
    );
    await queryRunner.query(
      `INSERT INTO "alcs"."typeorm_metadata"("database", "schema", "table", "type", "name", "value") VALUES (DEFAULT, $1, DEFAULT, $2, $3, $4)`,
      [
        'alcs',
        'VIEW',
        'planning_review_search_view',
        'SELECT "planning_review"."uuid" AS "uuid", "planning_review"."open" AS "open", "planningReviewType"."audit_deleted_date_at" AS "planningReviewType_audit_deleted_date_at", "planningReviewType"."audit_created_at" AS "planningReviewType_audit_created_at", "planningReviewType"."audit_updated_at" AS "planningReviewType_audit_updated_at", "planningReviewType"."audit_created_by" AS "planningReviewType_audit_created_by", "planningReviewType"."audit_updated_by" AS "planningReviewType_audit_updated_by", "planningReviewType"."label" AS "planningReviewType_label", "planningReviewType"."code" AS "planningReviewType_code", "planningReviewType"."description" AS "planningReviewType_description", "planningReviewType"."short_label" AS "planningReviewType_short_label", "planningReviewType"."background_color" AS "planningReviewType_background_color", "planningReviewType"."text_color" AS "planningReviewType_text_color", "planningReviewType"."html_description" AS "planningReviewType_html_description", "localGovernment"."name" AS "local_government_name", "planning_referral".*, "planning_review"."file_number" AS "file_number", "planning_review"."document_name" AS "document_name", planning_referral.submission_date AS "date_submitted_to_alc", "planning_review"."local_government_uuid" AS "local_government_uuid", "planning_review"."type_code" AS "planning_review_type_code", "planning_review"."region_code" AS "region_code" FROM "alcs"."planning_review" "planning_review" INNER JOIN "alcs"."planning_review_type" "planningReviewType" ON  "planning_review"."type_code" = "planningReviewType"."code" AND "planningReviewType"."audit_deleted_date_at" IS NULL  LEFT JOIN "alcs"."local_government" "localGovernment" ON  "planning_review"."local_government_uuid" = "localGovernment"."uuid" AND "localGovernment"."audit_deleted_date_at" IS NULL  LEFT JOIN (SELECT "planning_referral"."uuid" AS "planning_referral_uuid", "planning_referral"."submission_date" AS "submission_date", "planning_referral"."planning_review_uuid" AS "planning_review_uuid" FROM "alcs"."planning_referral" "planning_referral" INNER JOIN (SELECT "child"."planning_review_uuid" AS "planning_review_uuid", MIN("child"."audit_created_at") AS "audit_created_at" FROM "alcs"."planning_referral" "child" WHERE "child"."audit_deleted_date_at" IS NULL GROUP BY "child"."planning_review_uuid") "child" ON "planning_referral"."audit_created_at" = child.audit_created_at AND "planning_referral"."planning_review_uuid" = child.planning_review_uuid WHERE "planning_referral"."audit_deleted_date_at" IS NULL) "planning_referral" ON "planning_review"."uuid" = planning_referral.planning_review_uuid WHERE "planning_review"."audit_deleted_date_at" IS NULL',
      ],
    );
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    await queryRunner.query(
      `DELETE FROM "alcs"."typeorm_metadata" WHERE "type" = $1 AND "name" = $2 AND "schema" = $3`,
      ['VIEW', 'planning_review_search_view', 'alcs'],
    );
    await queryRunner.query(`DROP VIEW "alcs"."planning_review_search_view"`);
  }
}
